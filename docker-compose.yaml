version: '3.7'

volumes:
  letsencrypt:
    driver: local

networks:
  net:

services:
  proxy:
    container_name: proxy
    image: traefik
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./traefik:/config
    ports:
      - "80:80"
      - "443:443"
    command:
#      - "--log.level=DEBUG"
      - "--providers.file.directory=/config"
      - "--providers.file.watch=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge=true"
      - "--certificatesresolvers.myhttpchallenge.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myhttpchallenge.acme.email=diego.ciangottini@gmail.com"
      - "--certificatesresolvers.myhttpchallenge.acme.storage=/letsencrypt/acme.json"
      # Use this when testing, comment it when you are ready for a real certificate
      #- "--certificatesresolvers.myhttpchallenge.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    networks:
      - net
  grav:
    container_name: grav
    image: bozzochet/docker-herd-grav:latest
    expose:
      - 80
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.grav-redirect-ssl.redirectscheme.scheme=https"
      - "traefik.http.routers.grav-nossl.middlewares=grav-redirect-ssl"
#      - "traefik.http.routers.grav-nossl.rule=Host(`www.${DNS_NAME}`) || Host(`${DNS_NAME}`)"
      - "traefik.http.routers.grav-nossl.rule=Host(`www.${DNS_NAME}`) || Host(`${DNS_NAME}`)"
      - "traefik.http.routers.grav-nossl.entrypoints=web"
#      - "traefik.http.routers.grav.rule=Host(`www.${DNS_NAME}`) || Host(`${DNS_NAME}`)"
      - "traefik.http.routers.grav.rule=Host(`www.${DNS_NAME}`) || Host(`${DNS_NAME}`)"
      - "traefik.http.routers.grav.entrypoints=websecure"
      - "traefik.http.routers.grav.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.grav.tls=true"
      - "traefik.http.routers.grav.middlewares=grav-redirect"
#      - "traefik.http.middlewares.grav-redirect.redirectregex.regex=^https://`${DNS_NAME}`/(.*)" #non va
#      - "traefik.http.middlewares.grav-redirect.redirectregex.replacement=https://`www.${DNS_NAME}`/$${1}" #non va
      - "traefik.http.middlewares.grav-redirect.redirectregex.regex=^https://herd.cloud.infn.it/(.*)"
      - "traefik.http.middlewares.grav-redirect.redirectregex.replacement=https://www.herd.cloud.infn.it/$${1}"
      - "traefik.http.services.grav.loadbalancer.server.port=80"
  nextcloud:
    container_name: nextcloud
    image: nextcloud
    expose:
      - 80
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.nextcloud-redirect-ssl.redirectscheme.scheme=https"
      - "traefik.http.routers.nextcloud-nossl.middlewares=nextcloud-redirect-ssl"
      - "traefik.http.routers.nextcloud-nossl.rule=Host(`calendar.${DNS_NAME}`)"
      - "traefik.http.routers.nextcloud-nossl.entrypoints=web"
      - "traefik.http.routers.nextcloud.rule=Host(`calendar.${DNS_NAME}`)"
      - "traefik.http.routers.nextcloud.entrypoints=websecure"
      - "traefik.http.routers.nextcloud.tls.certresolver=myhttpchallenge"
      - "traefik.http.routers.nextcloud.tls=true"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
